<PROGRAM> ::= START <PROGRAM_KLEENE> END
<PROGRAM_KLEENE> ::= <STMT> <PROGRAM_KLEENE>
<PROGRAM_KLEENE> ::= ε
<STMT> ::= <SIMPLE_STMT> SEMI
<STMT> ::= <COMPOUND_STMT>
<SIMPLE_STMT> ::= <ASSIGNMENT_STMT>
<SIMPLE_STMT> ::= <RETURN_STMT>
<SIMPLE_STMT> ::= <IO_STATEMENT>
<SIMPLE_STMT> ::= <COLLECTION_STMT>
<SIMPLE_STMT> ::= <DECL_STMT>
<SIMPLE_STMT> ::= <STOP_STMT>
<SIMPLE_STMT> ::= <CONTINUE_STMT>
<SIMPLE_STMT> ::= <FUNC_CALL>
<COMPOUND_STMT> ::= <CONDITIONAL_STMT>
<COMPOUND_STMT> ::= <LOOP_STMT>
<COMPOUND_STMT> ::= <FUNC_DECL>
<COMPOUND_STMT> ::= <CHOOSE_WHAT_STMT>
<CONST> ::= NUMBER
<CONST> ::= DECIMAL
<CONST> ::= TEXT
<CONST> ::= <BINARY>
<CONST> ::= NONE
<EXPRESSION> ::= <LOGICOR_EXPR>
<LOGICOR_EXPR> ::= <LOGICAND_EXPR>
<LOGICOR_EXPR> ::= <LOGICOR_EXPR> OR <LOGICAND_EXPR>
<LOGICAND_EXPR> ::= <LOGICNOT_EXPR>
<LOGICAND_EXPR> ::= <LOGICAND_EXPR> AND <LOGICNOT_EXPR>
<LOGICNOT_EXPR> ::= <RELATIONAL_EXPR>
<LOGICNOT_EXPR> ::= NOT <LOGICNOT_EXPR>
<RELATIONAL_EXPR> ::= <RELATIONAL_EXPR> <RELATIONAL_OP> <BITOR_EXPR>
<RELATIONAL_EXPR> ::= <BITOR_EXPR>
<BITOR_EXPR> ::= <BITXOR_EXPR>
<BITOR_EXPR> ::= <BITOR_EXPR> BITWISE_OR <BITXOR_EXPR>
<BITXOR_EXPR> ::= <BITAND_EXPR>
<BITXOR_EXPR> ::= <BITXOR_EXPR> BITWISE_XOR <BITAND_EXPR>
<BITAND_EXPR> ::= <BITSHIFT_EXPR>
<BITAND_EXPR> ::= <BITAND_EXPR> BITWISE_AND <BITSHIFT_EXPR>
<BITSHIFT_EXPR> ::= <BITNOT_EXPR>
<BITSHIFT_EXPR> ::= <BITSHIFT_EXPR> <SHIFT_OP> <BITNOT_EXPR>
<BITNOT_EXPR> ::= BITWISE_NOT <BITNOT_EXPR>
<BITNOT_EXPR> ::= <BIT_BASE>
<BIT_BASE> ::= <TERM>
<BIT_BASE> ::= <BIT_BASE> <ADD_OP> <TERM>
<TERM> ::= <FACTOR>
<TERM> ::= <TERM> <MULTI_OP> <FACTOR>
<FACTOR> ::= <BASE>
<FACTOR> ::= <BASE> <EXP_OP> <FACTOR>
<FACTOR> ::= MINUS <FACTOR>
<BASE> ::= IDENTIFIER
<BASE> ::= LPAREN <EXPRESSION> RPAREN
<BASE> ::= <CONST>
<BASE> ::= <CONV_EXPR>
<BASE> ::= <COLLECTION_EXPR>
<BASE> ::= <COLLECTION_METHOD>
<BASE> ::= <FUNC_CALL>
<DECL_STMT> ::= <DATA_TYPE> IDENTIFIER
<IO_STATEMENT> ::= <OUTPUT_STMT>
<IO_STATEMENT> ::= <INPUT_STMT>
<OUTPUT_STMT> ::= SHOW LPAREN <EXPRESSION> RPAREN
<INPUT_STMT> ::= GET <DATA_TYPE> IDENTIFIER LPAREN RPAREN
<CONV_EXPR> ::= IDENTIFIER DOT CONVERT_TO LPAREN <DATA_TYPE> RPAREN
<ASSIGNMENT_STMT> ::= <DATA_TYPE> IDENTIFIER <ASSIGN_OP> <EXPRESSION>
<ASSIGNMENT_STMT> ::= IDENTIFIER <ASSIGN_OP> <EXPRESSION>
<ASSIGNMENT_STMT> ::= IDENTIFIER <ASSIGN_OP> <EXPRESSION>
<RETURN_STMT> ::= OUTPUT <EXPRESSION>
<CONTINUE_STMT> ::= CONTINUE
<STOP_STMT> ::= STOP
<CONDITIONAL_STMT> ::= IF LPAREN <EXPRESSION> RPAREN <BLOCK_STMT> <CONDITIONAL_STMT_GROUP>
<CONDITIONAL_STMT_GROUP> ::= OTHERWISE <BLOCK_STMT> <CONDITIONAL_STMT_GROUP>
<CONDITIONAL_STMT_GROUP> ::= ε
<BLOCK_STMT> ::= LCURLY <BLOCK_STMT_KLEENE> RCURLY
<BLOCK_STMT_KLEENE> ::= <STMT> <BLOCK_STMT_KLEENE>
<BLOCK_STMT_KLEENE> ::= ε
<LOOP_STMT> ::= <FOR_LOOP>
<LOOP_STMT> ::= <REPEAT_LOOP>
<LOOP_STMT> ::= <REPEAT_UNTIL>
<FOR_LOOP> ::= FOR LPAREN <ASSIGNMENT_STMT> SEMI <EXPRESSION> SEMI <ASSIGNMENT_STMT> RPAREN <BLOCK_STMT>
<REPEAT_LOOP> ::= REPEAT LPAREN <EXPRESSION> RPAREN <BLOCK_STMT>
<REPEAT_UNTIL> ::= REPEAT <BLOCK_STMT> UNTIL LPAREN <EXPRESSION> RPAREN
<FUNC_DECL> ::= METHOD IDENTIFIER LPAREN <FUNC_DECL_OPT> RPAREN <BLOCK_STMT>
<FUNC_DECL_OPT> ::= <PARAM_LIST>
<FUNC_DECL_OPT> ::= ε
<PARAM_LIST> ::= <DATA_TYPE> IDENTIFIER <PARAM_LIST_GROUP>
<PARAM_LIST_GROUP> ::= COMMA <DATA_TYPE> IDENTIFIER <PARAM_LIST_GROUP>
<PARAM_LIST_GROUP> ::= ε
<FUNC_CALL> ::= IDENTIFIER LPAREN <FUNC_CALL_OPT> RPAREN
<FUNC_CALL_OPT> ::= <ARG_LIST>
<FUNC_CALL_OPT> ::= ε
<ARG_LIST> ::= <EXPRESSION> <ARG_LIST_GROUP>
<ARG_LIST_GROUP> ::= COMMA <EXPRESSION> <ARG_LIST_GROUP>
<ARG_LIST_GROUP> ::= ε
<CHOOSE_WHAT_STMT> ::= CHOOSE_WHAT LPAREN <EXPRESSION> RPAREN LCURLY <CHOOSE_WHAT_STMT_KLEENE> RCURLY
<CHOOSE_WHAT_STMT_KLEENE> ::= <PICK_CASE> <CHOOSE_WHAT_STMT_KLEENE>
<CHOOSE_WHAT_STMT_KLEENE> ::= ε
<PICK_CASE> ::= PICK <EXPRESSION> COLON <BLOCK_STMT>
<COLLECTION_STMT> ::= <LIST_DECL>
<COLLECTION_STMT> ::= <PAIR_MAP_DECL>
<COLLECTION_STMT> ::= <COLLECTION_ASSIGN>
<LIST_DECL> ::= LIST_TYPE <DATA_TYPE> IDENTIFIER ASSIGN LBRACKET <EXPRESSION> <LIST_DECL_GROUP> RBRACKET
<LIST_DECL_GROUP> ::= COMMA <EXPRESSION> <LIST_DECL_GROUP>
<LIST_DECL_GROUP> ::= ε
<PAIR_MAP_DECL> ::= PAIR_MAP_TYPE LPAREN <DATA_TYPE> COLON <DATA_TYPE> RPAREN IDENTIFIER ASSIGN LBRACKET <PAIR_MAP_VAL> RBRACKET
<PAIR_MAP_VAL> ::= <PAIR> <PAIR_MAP_VAL_GROUP>
<PAIR_MAP_VAL_GROUP> ::= COMMA <PAIR>  <PAIR_MAP_VAL_GROUP>
<PAIR_MAP_VAL_GROUP> ::= ε
<PAIR> ::= LPAREN <EXPRESSION> COLON <EXPRESSION> RPAREN
<COLLECTION_ASSIGN> ::= <COLLECTION_EXPR> <ASSIGN_OP> <EXPRESSION>
<COLLECTION_EXPR> ::= <LIST_VALUE>
<COLLECTION_EXPR> ::= <PAIR_MAP_VALUE>
<COLLECTION_EXPR> ::= <PAIR_MAP_KEY>
<LIST_VALUE> ::= IDENTIFIER LBRACKET <EXPRESSION> RBRACKET
<PAIR_MAP_VALUE> ::= IDENTIFIER DOT VALUE LBRACKET <EXPRESSION> RBRACKET
<PAIR_MAP_KEY> ::= IDENTIFIER DOT KEY LBRACKET <EXPRESSION> RBRACKET
<COLLECTION_METHOD> ::= IDENTIFIER DOT  TO_TEXT LPAREN RPAREN
<COLLECTION_METHOD> ::= IDENTIFIER DOT LEN LPAREN RPAREN
<COLLECTION_METHOD> ::= IDENTIFIER DOT SORT LPAREN RPAREN
<DATA_TYPE> ::= BINARY_TYPE
<DATA_TYPE> ::= NUMBER_TYPE
<DATA_TYPE> ::= DECIMAL_TYPE
<DATA_TYPE> ::= TEXT_TYPE
<DATA_TYPE> ::= NONE
<RELATIONAL_OP> ::= EQ
<RELATIONAL_OP> ::= NEQ
<RELATIONAL_OP> ::= LT
<RELATIONAL_OP> ::= GT
<RELATIONAL_OP> ::= LEQ
<RELATIONAL_OP> ::= GEQ
<ADD_OP> ::= PLUS
<ADD_OP> ::= MINUS
<MULTI_OP> ::= MULT
<MULTI_OP> ::= DIV
<MULTI_OP> ::= MOD
<EXP_OP> ::= EXPONENT
<ASSIGN_OP> ::= ASSIGN
<ASSIGN_OP> ::= PLUS_ASSIGN
<ASSIGN_OP> ::= MINUS_ASSIGN
<ASSIGN_OP> ::= MULT_ASSIGN
<SHIFT_OP> ::= LSHIFT
<SHIFT_OP> ::= RSHIFT
<BINARY> ::= TRUE
<BINARY> ::= FALSE
